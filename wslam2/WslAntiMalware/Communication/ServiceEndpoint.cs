using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.Text;
using System.Threading.Tasks;

namespace WslAntiMalware.Communication
{
    public interface IEndpointCallback
    {
        event EventHandler<LogMessage> MessageReceived;
        event EventHandler<Detection> ProcessDetected;
    }

    public interface IEndpoint : IEndpointCallback, IWslAntiMalwareSystemServiceEndpoint
    {

    }

    public class ServiceEndpoint : WslAntiMalwareSystemServiceEndpointClient, IEndpoint
    {
        public event EventHandler<Detection> ProcessDetected;
        public event EventHandler<LogMessage> MessageReceived;

        public ServiceEndpoint() : this(new ServiceCallback()) { }

        public ServiceEndpoint(ServiceCallback callback) : base(new InstanceContext(callback))
        {
            callback.Initialize(this);
        }

        internal void OnDetection(Detection Detection)
        {
            ProcessDetected?.Invoke(this, Detection);
        }

        internal void OnMessage(LogMessage Message)
        {
            MessageReceived?.Invoke(this, Message);
        }
        
    }

    public class ServiceCallback : IWslAntiMalwareSystemServiceEndpointCallback
    {
        private ServiceEndpoint _proxy;

        public ServiceCallback() { }

        public void Initialize(ServiceEndpoint proxy)
        {
            _proxy = proxy;
        }

        public void OnDetection(Detection Detection)
        {
            _proxy.OnDetection(Detection);
        }

        public void OnMessage(LogMessage Message)
        {
            _proxy.OnMessage(Message);
        }
    }
}
