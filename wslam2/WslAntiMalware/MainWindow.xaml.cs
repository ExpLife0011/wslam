
using LiveCharts;
using LiveCharts.Defaults;
using LiveCharts.Wpf;
using System.Collections.ObjectModel;
using WslAntiMalware.ViewModels;
using WslAntiMalware.Communication;
using System.ServiceModel;
using System;
using System.Windows.Controls;
using System.Collections.Generic;
using System.Windows;
using System.Runtime.InteropServices;
using System.Windows.Interop;
using System.Windows.Forms;

namespace WslAntiMalware
{
    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    /// 
    public class TestItem
    {
        public string Text { get; set; }
        public string Resolution { get; set; }
    }

    public partial class MainWindow : Elysium.Controls.Window
    {
        public MainWindow()
        {
            var endpoint = new ServiceEndpoint();
            endpoint.Open();
            endpoint.RegisterClient("WslAntiMalware");
            this.Resources["endpoint"] = endpoint;
            this.Resources["vmMain"] = new MainPageViewModel(endpoint);
            this.Resources["vmDetections"] = new DetectionsViewModel(endpoint);
            this.Resources["vmLogs"] = new LogsViewModel(endpoint);
            this.Resources["vmSettings"] = new SettingsViewModel(endpoint);
            InitializeComponent();
            CreateNotifyIcon();
        }

        void CreateNotifyIcon()
        {
            Icon = new NotifyIcon
            {
                Icon = new System.Drawing.Icon("Main.ico"),
                Visible = true
            };

            Icon.Text = "WSL Anti-Malware";
            var contextMenuStrip = new ContextMenuStrip();
            contextMenuStrip.AutoSize = true;
            contextMenuStrip.ShowCheckMargin = true;
            var item = contextMenuStrip.Items.Add("Exit");
            item.Click += (s, e) => { Closing -= OnWindowClosing; Close(); };
            var contextMenu = new System.Windows.Forms.ContextMenu();
            Icon.ContextMenuStrip = contextMenuStrip;

            Icon.DoubleClick += (s, args) =>
            {
                if (IsVisible)
                {
                    Activate();
                }
                else
                {
                    Show();
                }

                if (this.WindowState == WindowState.Minimized)
                {
                    this.WindowState = WindowState.Normal;
                }
            };
        }

        protected override void OnClosed(EventArgs e)
        {
            base.OnClosed(e);
            Icon.Dispose();
        }

        private void StartMonitoring(object sender, RoutedEventArgs e)
        {
            var ts = sender as Elysium.Controls.ToggleSwitch;
            ts.Checked -= StartMonitoring;
            ts.Checked += (this.Resources["vmSettings"] as SettingsViewModel).StartMonitoring;
            (this.Resources["vmSettings"] as SettingsViewModel).StartMonitoring(sender, e);
        }

        private void StopMonitoring(object sender, RoutedEventArgs e)
        {
            var ts = sender as Elysium.Controls.ToggleSwitch;
            ts.Checked -= StartMonitoring;
            ts.Checked += (this.Resources["vmSettings"] as SettingsViewModel).StopMonitoring;
            (this.Resources["vmSettings"] as SettingsViewModel).StopMonitoring(sender, e);
        }

        private void OnWindowClosing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            e.Cancel = true;
            this.Hide();
        }

        private NotifyIcon Icon { get; set; }

    }
}
