using System.Diagnostics.Tracing;
using System.Diagnostics;
using System.Diagnostics.Eventing;


namespace WslAntiMalware.Tracing
{
    public sealed class ServiceLog
    {
        public static ServiceLog Instance
        {
            get
            {
                return instance;
            }
        }

        public void LogInfo(string Message)
        {
            eventLog.WriteEntry(Message, EventLogEntryType.Information);
        }

        public void LogError(string Message)
        {
            eventLog.WriteEntry(Message, EventLogEntryType.Error);
        }

        public void LogFailureAudit(string Message)
        {
            eventLog.WriteEntry(Message, EventLogEntryType.FailureAudit);
            securityEventLog.WriteEntry(Message, EventLogEntryType.FailureAudit);
        }

        public void LogSuccessAudit(string Message)
        {
            eventLog.WriteEntry(Message, EventLogEntryType.SuccessAudit);
            securityEventLog.WriteEntry(Message, EventLogEntryType.SuccessAudit);
        }


        private ServiceLog()
        {
            eventLog = BuildEventLog(LOG_NAME, LOG_SOURCE_NAME);
            securityEventLog = BuildEventLog(SECURITY_LOG_NAME, LOG_SOURCE_NAME);
        }

        private EventLog BuildEventLog(string LogName, string SourceName)
        {
            if (!EventLog.SourceExists(SourceName))
            {
                EventLog.CreateEventSource(SourceName, LogName);
            }
            EventLog newEventLog = new EventLog();
            newEventLog.Log = LogName;
            newEventLog.Source = SourceName;
            return newEventLog;
        }


        private static readonly ServiceLog instance = new ServiceLog();
        private EventLog eventLog;
        private EventLog securityEventLog;
        private const string LOG_NAME = "WSL Anti-Malware System Service";
        private const string SECURITY_LOG_NAME = "Security";
        private const string LOG_SOURCE_NAME = "wslamss";
    }
    
    [EventSource(Name = "WslAntiMalwareSystemService", Guid = "{A6183785-AE6D-44DD-AEC5-6A81380142CE}")]
    public sealed class Logger : EventSource
    {
        public static Logger Instance
        {
            get
            {
                return instance;
            }
        }

        [Event(1, Keywords = EventKeywords.EventLogClassic, Level = EventLevel.Critical, Message = "TEST", Opcode = EventOpcode.Info, Task =EventTask.None, Version = 1)]
        public void LogMessage(string Message)
        {
            WriteEvent(1, Message);
        }

        private Logger() : base(true) { }

        private static readonly Logger instance = new Logger();
    }

    [EventSource(Name = "MyCompany", Guid = "{7B25937F-14D7-4BFF-BD7D-2A0C00ABA1EE}")]
    public class MyCompanyEventSource : EventSource
    {
        public class Keywords
        {
            public const EventKeywords Page = (EventKeywords)1;
            public const EventKeywords DataBase = (EventKeywords)2;
            public const EventKeywords Diagnostic = (EventKeywords)4;
            public const EventKeywords Perf = (EventKeywords)8;
        }

        public class Tasks
        {
            public const EventTask Page = (EventTask)1;
            public const EventTask DBQuery = (EventTask)2;
        }

        private static MyCompanyEventSource _log = new MyCompanyEventSource();
        private MyCompanyEventSource() { }
        public static MyCompanyEventSource Log { get { return _log; } }

        [Event(1, Message = "Application Failure: {0}",
        Level = EventLevel.Critical, Keywords = Keywords.Diagnostic)]
        internal void Failure(string message)
        {
            this.WriteEvent(1, message);
        }

        [Event(2, Message = "Starting up.", Keywords = Keywords.Perf,
        Level = EventLevel.Informational)]
        internal void Startup()
        {
            this.WriteEvent(2);
        }

        [Event(3, Message = "loading page {1} activityID={0}",
        Opcode = EventOpcode.Start,
        Task = Tasks.Page, Keywords = Keywords.Page,
        Level = EventLevel.Informational)]
        internal void PageStart(int ID, string url)
        {
            if (this.IsEnabled()) this.WriteEvent(3, ID, url);
        }
}   

    [EventSource(Name = "ConsoleLog", Guid = "{7B25937F-14D7-4BFF-BD7D-2A0C00ABA1EE}")]
    public sealed class ConsoleEventSource : EventSource
    {
        public static ConsoleEventSource Log = new ConsoleEventSource();

        /// <summary>
        /// Write a console message
        /// </summary>
        /// <param name="Message"></param>
        public void Write(string Message)
        {
            WriteEvent(1, Message);
        }
        private ConsoleEventSource() : base(true)
        { }
    }
}
