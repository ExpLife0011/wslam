using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration.Install;
using System.Data;
using System.Data.SQLite;
using System.Diagnostics;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Description;
using System.ServiceProcess;
using System.Text;
using System.Threading;
using System.Threading.Tasks;
using WslAntiMalware.Communication;
using WslAntiMalware.Storage;

namespace WslAntiMalware
{

    //class WindowsService : ServiceBase
    //{
    //    /// <summary>
    //    /// Public Constructor for WindowsService.
    //    /// - Put all of your Initialization code here.
    //    /// </summary>
    //    public WindowsService()
    //    {
    //        this.ServiceName = "My Windows Service";
    //        this.EventLog.Log = "Application";

    //        // These Flags set whether or not to handle that specific
    //        //  type of event. Set to true if you need it, false otherwise.
    //        this.CanHandlePowerEvent = true;
    //        this.CanHandleSessionChangeEvent = true;
    //        this.CanPauseAndContinue = true;
    //        this.CanShutdown = true;
    //        this.CanStop = true;
    //    }

    //    /// <summary>
    //    /// The Main Thread: This is where your Service is Run.
    //    /// </summary>
    //    static void Main()
    //    {
    //        ServiceBase.Run(new WindowsService());
    //    }

    //    /// <summary>
    //    /// Dispose of objects that need it here.
    //    /// </summary>
    //    /// <param name="disposing">Whether
    //    ///    or not disposing is going on.</param>
    //    protected override void Dispose(bool disposing)
    //    {
    //        base.Dispose(disposing);
    //    }

    //    /// <summary>
    //    /// OnStart(): Put startup code here
    //    ///  - Start threads, get inital data, etc.
    //    /// </summary>
    //    /// <param name="args"></param>
    //    protected override void OnStart(string[] args)
    //    {
    //        base.OnStart(args);
    //        Debugger.Launch();
    //        AppServiceConnection con = new AppServiceConnection();
    //        con.NotifyDetection("test");
    //    }

    //    /// <summary>
    //    /// OnStop(): Put your stop code here
    //    /// - Stop threads, set final data, etc.
    //    /// </summary>
    //    protected override void OnStop()
    //    {
    //        base.OnStop();
    //    }

    //    /// <summary>
    //    /// OnPause: Put your pause code here
    //    /// - Pause working threads, etc.
    //    /// </summary>
    //    protected override void OnPause()
    //    {
    //        base.OnPause();
    //    }

    //    /// <summary>
    //    /// OnContinue(): Put your continue code here
    //    /// - Un-pause working threads, etc.
    //    /// </summary>
    //    protected override void OnContinue()
    //    {
    //        base.OnContinue();
    //    }

    //    /// <summary>
    //    /// OnShutdown(): Called when the System is shutting down
    //    /// - Put code here when you need special handling
    //    ///   of code that deals with a system shutdown, such
    //    ///   as saving special data before shutdown.
    //    /// </summary>
    //    protected override void OnShutdown()
    //    {
    //        base.OnShutdown();
    //    }

    //    /// <summary>
    //    /// OnCustomCommand(): If you need to send a command to your
    //    ///   service without the need for Remoting or Sockets, use
    //    ///   this method to do custom methods.
    //    /// </summary>
    //    /// <param name="command">Arbitrary Integer between 128 & 256</param>
    //    protected override void OnCustomCommand(int command)
    //    {
    //        //  A custom command can be sent to a service by using this method:
    //        //#  int command = 128; //Some Arbitrary number between 128 & 256
    //        //#  ServiceController sc = new ServiceController("NameOfService");
    //        //#  sc.ExecuteCommand(command);

    //        base.OnCustomCommand(command);
    //    }

    //    /// <summary>
    //    /// OnPowerEvent(): Useful for detecting power status changes,
    //    ///   such as going into Suspend mode or Low Battery for laptops.
    //    /// </summary>
    //    /// <param name="powerStatus">The Power Broadcast Status
    //    /// (BatteryLow, Suspend, etc.)</param>
    //    protected override bool OnPowerEvent(PowerBroadcastStatus powerStatus)
    //    {
    //        return base.OnPowerEvent(powerStatus);
    //    }

    //    /// <summary>
    //    /// OnSessionChange(): To handle a change event
    //    ///   from a Terminal Server session.
    //    ///   Useful if you need to determine
    //    ///   when a user logs in remotely or logs off,
    //    ///   or when someone logs into the console.
    //    /// </summary>
    //    /// <param name="changeDescription">The Session Change
    //    /// Event that occured.</param>
    //    protected override void OnSessionChange(
    //              SessionChangeDescription changeDescription)
    //    {
    //        base.OnSessionChange(changeDescription);
    //    }
    //}

    //[RunInstaller(true)]
    //public class WindowsServiceInstaller : Installer
    //{
    //    /// <summary>
    //    /// Public Constructor for WindowsServiceInstaller.
    //    /// - Put all of your Initialization code here.
    //    /// </summary>
    //    public WindowsServiceInstaller()
    //    {
    //        ServiceProcessInstaller serviceProcessInstaller =
    //                           new ServiceProcessInstaller();
    //        ServiceInstaller serviceInstaller = new ServiceInstaller();

    //        //# Service Account Information
    //        serviceProcessInstaller.Account = ServiceAccount.LocalSystem;
    //        serviceProcessInstaller.Username = null;
    //        serviceProcessInstaller.Password = null;

    //        //# Service Information
    //        serviceInstaller.DisplayName = "My New C# Windows Service";
    //        serviceInstaller.StartType = ServiceStartMode.Automatic;

    //        //# This must be identical to the WindowsService.ServiceBase name
    //        //# set in the constructor of WindowsService.cs
    //        serviceInstaller.ServiceName = "My Windows Service";

    //        this.Installers.Add(serviceProcessInstaller);
    //        this.Installers.Add(serviceInstaller);
    //    }
    //}

    class Program
    {
        static void Main(string[] args)
        {
            var settings = new SettingsStorage();
            var detections = new DetectionsHistory();
            var logs = new LogsHistory();

            //logs.Add(new LogMessage("log1", Severity.Information));
            //logs.Add(new LogMessage("log2", Severity.Warning));
            //logs.Add(new LogMessage("log3", Severity.Error));


            var systemService = new SystemService(settings, detections, logs);
            var wcfService = new WCFService(systemService);
            //if (args.Length != 0)
            //{
            //    var con = new AppServiceConnection();
            //    con.NotifyDetection("testimage.elf");
            //}
            while (true)
            {
                Thread.Sleep(5000);
            }
            //wcfService.Dispose();
        }
    }
}
