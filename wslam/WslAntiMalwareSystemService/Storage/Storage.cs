using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SQLite;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WslAntiMalware.Communication;
//CREATE TABLE IF NOT EXISTS foo(id INTEGER, ...);
namespace WslAntiMalware.Storage
{
    abstract class BaseStorage
    {
        public BaseStorage(string TableName)
        {
            _tableName = TableName;
            _dataSet = new DataSet();
            _sqlCon = new SQLiteConnection("Data Source=wslamss.db;Version=3;Compress=True;");
            _sqlCon.Open();
            CreateTableIfNeeded();
            var cmd = new SQLiteCommand($@"SELECT * FROM {TableName}", _sqlCon);
            _adapter = new SQLiteDataAdapter(cmd);
            _cb = new SQLiteCommandBuilder(_adapter);
            _adapter.Fill(_dataSet, TableName);
        }


        protected abstract void CreateTableIfNeeded();

        protected DataRowCollection Data
        {
            get
            {
                return _dataSet.Tables[_tableName].Rows;
            }
        }

        protected void Add(DataRow row)
        {
            _dataSet.Tables[_tableName].Rows.Add(row);
            _adapter.Update(_dataSet, _tableName);
        }

        public void Remove(int id)
        {
            var rowsToRemove = _dataSet.Tables[_tableName].AsEnumerable().Where(row => Convert.ToInt32(row["id"]) == id).ToList();
            foreach(var row in rowsToRemove)
            {
                Data.Remove(row);
            }
            _adapter.Update(_dataSet, _tableName);
        }

        private string _tableName;
        SQLiteCommandBuilder _cb;

        protected SQLiteDataAdapter _adapter;
        protected DataSet _dataSet;
        protected SQLiteConnection _sqlCon;
    }

    class DetectionsHistory : BaseStorage
    {
        public DetectionsHistory() : base("Detections")
        {
        }

        public void Add(Detection d)
        {
            var r = _dataSet.Tables["Detections"].NewRow();
            r["id"] = d.UID;
            r["imageFileName"] = d.ImageFileName;
            r["resolution"] = d.Resolution;
            base.Add(r);
        }

        public List<Detection> Detections
        {
            get
            {
                List<Detection> detections = new List<Detection>();
                foreach (DataRow row in _dataSet.Tables["Detections"].Rows)
                {
                    detections.Add(new Detection(Convert.ToInt32(row["id"]), (string)row["imageFileName"], (DetectionResolutionType)Convert.ToInt32(row["resolution"])));
                }
                return detections;
            }
        }


        protected override void CreateTableIfNeeded()
        {
            var cmd = _sqlCon.CreateCommand();
            cmd.CommandText = "CREATE TABLE IF NOT EXISTS Detections(id INTEGER PRIMARY KEY, imageFileName STRING, resolution INTEGER);";
            cmd.ExecuteNonQuery();
        }


    }

    //class LogsHistory : BaseStorage
    //{
    //    protected override void CreateTableIfNeeded()
    //    {
    //        throw new NotImplementedException();
    //    }
    //}

    //class Settings : BaseStorage
    //{
    //    protected override void CreateTableIfNeeded()
    //    {
    //        throw new NotImplementedException();
    //    }
    //}
}
