using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.ServiceModel.Description;
using System.ServiceModel.Dispatcher;
using System.Threading;
using WslAntiMalware.Tracing;

namespace WslAntiMalware.Communication
{
    [DataContract]
    public class Detection
    {
        public Detection(long UID, string ImageFileName, DetectionResolutionType Resolution)
        {
            this.ImageFileName = ImageFileName;
            this.Resolution = Resolution;
            this.UID = UID;
        }

        public Detection(string ImageFileName, DetectionResolutionType Resolution)
        {
            this.ImageFileName = ImageFileName;
            this.Resolution = Resolution;
            this.UID = Interlocked.Increment(ref NextUID);
        }

        [DataMember]
        public string ImageFileName { get; set; }

        [DataMember]
        public DetectionResolutionType Resolution { get; set; }

        [DataMember]
        public long UID { get; set; }

        static long NextUID;
    }

    [DataContract]
    public class LogMessage
    {
        [DataMember]
        public string Message { get; set; }

        [DataMember]
        public Severity Severity { get; set; }
    }

    public class WCFService2
    {
        public WCFService2()
        {
            //var host = new ServiceHost(typeof(WslAntiMalwareSystemServiceEndpoint), baseAddress);
            //var instanceProvider = new InstanceProviderBehavior<WslAntiMalwareSystemServiceEndpoint>(() => new WslAntiMalwareSystemServiceEndpoint(this));
            //instanceProvider.AddToAllContracts(this);
        }
    }


    public sealed class WCFService : ServiceHost
    {
        public WCFService() : base(typeof(WslAntiMalwareSystemServiceEndpoint), new Uri("net.tcp://localhost:8000"))
        {
            //var host = new ServiceHost(typeof(MyService), baseAddress);
            //var instanceProvider = new InstanceProviderBehavior<WslAntiMalwareSystemServiceEndpoint>(() => new WslAntiMalwareSystemServiceEndpoint(this));
            //instanceProvider.AddToAllContracts(this);
            var binding = new NetTcpBinding(SecurityMode.None);
            this.AddServiceEndpoint(typeof(IWslAntiMalwareSystemServiceEndpoint), binding, "WslAntiMalwareSystemServiceEndpoint");
            ServiceMetadataBehavior smb = new ServiceMetadataBehavior();
            smb.HttpGetEnabled = false;
            this.Description.Behaviors.Add(smb);
            this.AddServiceEndpoint(ServiceMetadataBehavior.MexContractName, MetadataExchangeBindings.CreateMexTcpBinding(), "mex");
        }

        internal void SendMessage(string msg, Severity severity)
        {
            WslAntiMalwareSystemServiceEndpoint.endpoint.LogMessage(msg, severity);
        }
    }

    public sealed class WCFEndpoint
    {

    }

    [DataContract(Name = "Severity")]
    public enum Severity
    {
        [EnumMember]
        Information,
        [EnumMember]
        Warning,
        [EnumMember]
        Error,
    }

    [DataContract(Name = "DetectionResolutionType")]
    public enum DetectionResolutionType : Int32
    {
        [EnumMember]
        Excepted,
        [EnumMember]
        Killed,
    }

    [ServiceContract(Namespace = "http://Microsoft.ServiceModel.Samples", CallbackContract = typeof(ISystemServiceMessages), SessionMode = SessionMode.Required)]
    public interface IWslAntiMalwareSystemServiceEndpoint
    {
        [OperationContract]
        void RegisterClient(string Token);
        [OperationContract]
        bool StartMonitoring();
        [OperationContract]
        bool StopMonitoring();
        [OperationContract]
        List<Detection> Detections();
    }

    public interface ISystemServiceMessages
    {
        [OperationContract(IsOneWay = true)]
        void OnMessage(LogMessage Message);
        [OperationContract(IsOneWay = true)]
        void OnDetection(string ImageFileName);
    }

    public class ClientEventArgs : EventArgs
    {
        public long Status { get; set; }
    }

    public class RegisterEventArgs : ClientEventArgs
    {
        public string Token { get; set; }
    }

    public delegate void HandleClientRegister(IWslAntiMalwareSystemServiceEndpoint Sender, ClientEventArgs Event);
    public delegate void HandleStopMonitoring(IWslAntiMalwareSystemServiceEndpoint Sender, ClientEventArgs Event);
    public delegate void HandleStartMonitoring(IWslAntiMalwareSystemServiceEndpoint Sender, ClientEventArgs Event);

    public class WslAntiMalwareSystemServiceEndpoint : IWslAntiMalwareSystemServiceEndpoint
    {
        public event HandleClientRegister OnClientRegister;
        public event HandleStartMonitoring OnStartMonitoring;
        public event HandleStopMonitoring OnStopMonitoring;


        public WslAntiMalwareSystemServiceEndpoint(int asdf)
        {
            ServiceLog.Instance.LogInfo("New client connection 2");
        }

        public WslAntiMalwareSystemServiceEndpoint()
        {
            ServiceLog.Instance.LogInfo("New client connection");
        }

        public void RegisterClient(string Token)
        {
            if (Token == "WslAntiMalware")
            {
                if (endpoint != null)
                {
                    ServiceLog.Instance.LogInfo("Received new client registration. Disposing old one.");
                }
                endpoint = this;
                Callback = OperationContext.Current.GetCallbackChannel<ISystemServiceMessages>();
                OnClientRegister?.Invoke(this, new RegisterEventArgs { Token = Token, Status = 0 });
            }
        }

        public bool StartMonitoring()
        {
            if (!IsRegisteredEndpoint(this))
            {
                ServiceLog.Instance.LogInfo("Received start monitoring request from unregistered client.");
                return false;
            }
            ServiceLog.Instance.LogInfo("Received start monitoring request.");

            var args = new ClientEventArgs { Status = 0 };
            OnStartMonitoring?.Invoke(this, args);

            return args.Status == 0;
        }

        public bool StopMonitoring()
        {
            if (!IsRegisteredEndpoint(this))
            {
                ServiceLog.Instance.LogInfo("Received stop monitoring request from unregistered client.");
                return false;
            }
            ServiceLog.Instance.LogInfo("Received stop monitoring request.");
            return true;
        }

        private bool IsRegisteredEndpoint(WslAntiMalwareSystemServiceEndpoint Endpoint)
        {
            return this == endpoint;
        }

        public List<Detection> Detections()
        {
            var list = new List<Detection>();
            return list;
        }

        internal void LogMessage(string msg, Severity severity)
        {
            var lm = new LogMessage();
            lm.Message = msg;
            lm.Severity = severity;
            Callback.OnMessage(lm);
        }

        private ISystemServiceMessages Callback
        {
            get; set;
        }

        public static WslAntiMalwareSystemServiceEndpoint endpoint = null;
    }



















    public class InstanceProviderBehavior<T> : IInstanceProvider, IContractBehavior
    where T : class
    {
        private readonly Func<T> m_instanceProvider;

        public InstanceProviderBehavior(Func<T> instanceProvider)
        {
            m_instanceProvider = instanceProvider;
        }

        // I think this method is more suitable to be an extension method of ServiceHost.
        // I put it here in order to simplify the code.
        public void AddToAllContracts(ServiceHost serviceHost)
        {
            foreach (var endpoint in serviceHost.Description.Endpoints)
            {
                endpoint.Contract.Behaviors.Add(this);
            }
        }

        #region IInstanceProvider Members

        public object GetInstance(InstanceContext instanceContext, Message message)
        {
            return this.GetInstance(instanceContext);
        }

        public object GetInstance(InstanceContext instanceContext)
        {
            // Create a new instance of T
            return m_instanceProvider.Invoke();
        }

        public void ReleaseInstance(InstanceContext instanceContext, object instance)
        {
            try
            {
                var disposable = instance as IDisposable;
                if (disposable != null)
                {
                    disposable.Dispose();
                }
            }
            catch { }
        }

        #endregion

        #region IContractBehavior Members

        public void AddBindingParameters(ContractDescription contractDescription, ServiceEndpoint endpoint, BindingParameterCollection bindingParameters)
        {
        }

        public void ApplyClientBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, ClientRuntime clientRuntime)
        {
        }

        public void ApplyDispatchBehavior(ContractDescription contractDescription, ServiceEndpoint endpoint, DispatchRuntime dispatchRuntime)
        {
            dispatchRuntime.InstanceProvider = this;
        }

        public void Validate(ContractDescription contractDescription, ServiceEndpoint endpoint)
        {
        }

        #endregion
    }
}
