using System;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.ServiceModel.Description;
using System.ServiceModel.Dispatcher;
using System.Threading;
using WslAntiMalware.Storage;
using WslAntiMalware.Tracing;

namespace WslAntiMalware.Communication
{
    public sealed class WCFService : IDisposable
    {
        public WCFService(SystemService Service)
        {
            ConfigureServiceHost();
            ConfigureMetadataBehaviour(_host);
            AddInstanceProviderBehavior(Service);
            _host.Open();
        }

        private void ConfigureServiceHost()
        {
            _host = new ServiceHost(typeof(ServiceEndpoint), new Uri("net.tcp://localhost:8000"));
            var binding = new NetTcpBinding(SecurityMode.None);
            _host.AddServiceEndpoint(typeof(IWslAntiMalwareSystemServiceEndpoint), binding, "WslAntiMalwareSystemServiceEndpoint");
        }

        private void ConfigureMetadataBehaviour(ServiceHost host)
        {
            ServiceMetadataBehavior smb = new ServiceMetadataBehavior();
            smb.HttpGetEnabled = false;
            host.Description.Behaviors.Add(smb);
            host.AddServiceEndpoint(ServiceMetadataBehavior.MexContractName, MetadataExchangeBindings.CreateMexTcpBinding(), "mex");
        }

        private void AddInstanceProviderBehavior(SystemService Service)
        {
            var instanceProvider = new InstanceProviderBehavior<ServiceEndpoint>(() => new ServiceEndpoint(Service));
            instanceProvider.AddToAllContracts(_host);
        }

        public void Dispose()
        {
            _host.Close();
        }

        private ServiceHost _host;
    }

    public class ClientEventArgs : EventArgs
    {
        public long Status { get; set; }
    }

    public class RegisterEventArgs : ClientEventArgs
    {
        public string Token { get; set; }
    }

    public class ClientDetectionRequestEventArgs : ClientEventArgs
    {
        public ClientDetectionRequestEventArgs()
        {
            Detections = new List<Detection>();
        }

        public List<Detection> Detections { get; private set; }
    }
    

    public delegate void HandleClientRegister(IWslAntiMalwareSystemServiceEndpoint Sender, ClientEventArgs Event);
    public delegate void HandleStopMonitoring(IWslAntiMalwareSystemServiceEndpoint Sender, ClientEventArgs Event);
    public delegate void HandleStartMonitoring(IWslAntiMalwareSystemServiceEndpoint Sender, ClientEventArgs Event);
    public delegate void HandleDetections(IWslAntiMalwareSystemServiceEndpoint Sender, ClientDetectionRequestEventArgs Event);

    public class ServiceEndpoint : IWslAntiMalwareSystemServiceEndpoint
    {
        public event HandleClientRegister OnClientRegister;
        public event HandleStartMonitoring OnStartMonitoring;
        public event HandleStopMonitoring OnStopMonitoring;
        public event HandleDetections OnDetectionsRequest;


        public ServiceEndpoint(SystemService Service)
        {
            ServiceLog.Instance.LogInfo("New client connection 2");
            Callback = OperationContext.Current.GetCallbackChannel<ISystemServiceMessages>();
            Service.Configure(this);
        }

        public void RegisterClient(string Token)
        {
            ServiceLog.Instance.LogInfo("New client registration request received.");
            OnClientRegister?.Invoke(this, new RegisterEventArgs { Token = Token, Status = 0 });
        }

        public bool StartMonitoring()
        {
            ServiceLog.Instance.LogInfo("Received start monitoring request.");
            var args = new ClientEventArgs { Status = 0 };
            OnStartMonitoring?.Invoke(this, args);
            return args.Status == 0;
        }

        public bool StopMonitoring()
        {
            ServiceLog.Instance.LogInfo("Received stop monitoring request.");
            var args = new ClientEventArgs { Status = 0 };
            OnStopMonitoring?.Invoke(this, args);
            return args.Status == 0;
        }

        public List<Detection> Detections()
        {
            var args = new ClientDetectionRequestEventArgs { Status = 0 };
            OnDetectionsRequest?.Invoke(this, args);
            return args.Detections;
        }

        public void LogMessage(string msg, Severity severity)
        {
            var lm = new LogMessage(msg, severity);
            lm.Log = msg;
            lm.Severity = severity;
            Callback.OnMessage(lm);
        }

        public ISystemServiceMessages Callback
        {
            get; private set;
        }

        public static ServiceEndpoint endpoint = null;
    }

    public class InstanceProviderBehavior<T> : IInstanceProvider, IContractBehavior
    where T : class
    {
        private readonly Func<T> m_instanceProvider;

        public InstanceProviderBehavior(Func<T> instanceProvider)
        {
            m_instanceProvider = instanceProvider;
        }

        // I think this method is more suitable to be an extension method of ServiceHost.
        // I put it here in order to simplify the code.
        public void AddToAllContracts(ServiceHost serviceHost)
        {
            foreach (var endpoint in serviceHost.Description.Endpoints)
            {
                endpoint.Contract.Behaviors.Add(this);
            }
        }

        #region IInstanceProvider Members

        public object GetInstance(InstanceContext instanceContext, Message message)
        {
            return this.GetInstance(instanceContext);
        }

        public object GetInstance(InstanceContext instanceContext)
        {
            // Create a new instance of T
            return m_instanceProvider.Invoke();
        }

        public void ReleaseInstance(InstanceContext instanceContext, object instance)
        {
            try
            {
                var disposable = instance as IDisposable;
                if (disposable != null)
                {
                    disposable.Dispose();
                }
            }
            catch { }
        }

        #endregion

        #region IContractBehavior Members

        public void AddBindingParameters(ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, BindingParameterCollection bindingParameters)
        {
        }

        public void ApplyClientBehavior(ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, ClientRuntime clientRuntime)
        {
        }

        public void ApplyDispatchBehavior(ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, DispatchRuntime dispatchRuntime)
        {
            dispatchRuntime.InstanceProvider = this;
        }

        public void Validate(ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint)
        {
        }

        #endregion
    }
}
