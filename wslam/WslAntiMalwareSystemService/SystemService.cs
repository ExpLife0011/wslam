using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using WslAntiMalware.Communication;
using WslAntiMalware.Storage;

namespace WslAntiMalware
{
    public class SystemService
    {
        public SystemService(SettingsStorage Settings, DetectionsHistory Detections, LogsHistory Logs)
        {
            _settings = Settings;
            _detections = Detections;
            _logs = Logs;
            Task.Run(() =>
            {
                int s = 0;
                while (true)
                {
                    Console.WriteLine("CMD:");
                    var cmd = Console.ReadLine();
                    if (cmd == "detect")
                    {
                        var fn = Console.ReadLine();
                        var det = new Detection(fn, DetectionResolutionType.Killed);
                        _detections.Add(det);
                        _callback.OnDetection(det);
                    } else if(cmd == "log")
                    {
                        var msg = Console.ReadLine();
                        var log = new LogMessage(msg, (Severity)s);
                        _callback.OnMessage(log);
                        s += 1;
                        s = s % 3;
                    }
                }
            });
        }

        public void Configure(ServiceEndpoint Endpoint)
        {
            _callback = Endpoint.Callback;
            Endpoint.ClientRegistered += OnClientRegister;
        }

        private void OnClientRegister(object Sender, ClientEventArgs Event)
        {
            ServiceEndpoint endpoint = Sender as ServiceEndpoint;
            endpoint.StartMonitoringRequested += OnStartMonitoring;
            endpoint.StopMonitoringRequested += OnStopMonitoring;
            endpoint.DetectionsRequested += OnDetectionsRequest;
            endpoint.LogsRequested += OnLogsRequest;
            endpoint.SettingsRequested += OnSettingsRequest;
        }

        private void OnStartMonitoring(object Sender, ClientEventArgs Event)
        {
            Console.WriteLine("start");
            _settings.MonitoringState = true;
        }

        private void OnStopMonitoring(object Sender, ClientEventArgs Event)
        {
            Console.WriteLine("stop");
            _settings.MonitoringState = false;
        }

        private void OnDetectionsRequest(object Sender, ClientDetectionRequestEventArgs Event)
        {
            Console.WriteLine("detections");
            Event.Detections.AddRange(_detections.Detections);
        }

        private void OnLogsRequest(object Sender, ClientLogsRequestEventArgs Event)
        {
            Console.WriteLine("logs");
            Event.Logs.AddRange(_logs.Logs);
        }

        private void OnSettingsRequest(object Sender, ClientSettingsRequestEventArgs Event)
        {
            Console.WriteLine("settings");
            Event.Settings.IsMonitoringOn = _settings.MonitoringState;
            Event.Settings.IsElevatedWslAllowed = false;
        }

        private ISystemServiceMessages _callback;
        private SettingsStorage _settings;
        private DetectionsHistory _detections;
        private LogsHistory _logs;
        //private AppServiceConnection c;
    }
}
