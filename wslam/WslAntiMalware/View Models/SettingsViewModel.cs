using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Windows.UI.Xaml;
using Windows.UI.Xaml.Controls;
using WslAntiMalware.Communication;

namespace WslAntiMalware.ViewModel
{
    class SettingsViewModel : BaseViewModel
    {
        public SettingsViewModel(ServiceEndpoint endpoint) : base(endpoint) { }

        public bool IsMonitoringProgressRingVisible
        {
            get { return _isMonitoringProgressRingVisible; }
            set { _isMonitoringProgressRingVisible = true; }
        }

        public bool IsWslPolicyProgressRingVisibile
        {
            get { return _isWslPolicyProgressRingVisibile; }
            set { _isWslPolicyProgressRingVisibile = value; }
        }

        public async void ToggleMonitoringState(object sender, RoutedEventArgs e)
        {
            var ts = sender as ToggleSwitch;
            try
            {
                ts.IsEnabled = false;
                ToggleProgressRing(ref _isMonitoringProgressRingVisible, "IsMonitoringProgressRingVisible");
                var succeeded = false;
                await Task.Delay(1000);
                if (ts.IsOn)
                {
                    succeeded = await Endpoint.StartMonitoring();
                }
                else
                {
                    succeeded = await Endpoint.StopMonitoring();
                }

                if (!succeeded)
                {
                    ResetToggleSwitch(ts, ToggleMonitoringState);
                }
            }
            finally
            {
                ToggleProgressRing(ref _isMonitoringProgressRingVisible, "IsMonitoringProgressRingVisible");
                ts.IsEnabled = true;
            }
        }   

        public async void ToggleElevetedWslPolicy(object sender, RoutedEventArgs e)
        {
            ToggleProgressRing(ref _isWslPolicyProgressRingVisibile, "IsWslPolicyProgressRingVisibile");
            await Task.Delay(1000);
        }

        private void ResetToggleSwitch(ToggleSwitch toggleSwitch, RoutedEventHandler handler)
        {
            toggleSwitch.Toggled -= handler;
            try
            {
                toggleSwitch.IsOn = !toggleSwitch.IsOn;
            }
            finally
            {
                toggleSwitch.Toggled += handler;
            }
        }

        private void ToggleProgressRing(ref bool state, string propertyName)
        {
            state = !state;
            OnPropertyChanged(this, new PropertyChangedEventArgs(propertyName));
        }

        private bool _isMonitoringProgressRingVisible;
        private bool _isWslPolicyProgressRingVisibile;
    }
}
