//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.VisualStudio.ServiceReference.Platforms, version 15.0.27428.2011
// 
namespace WslAntiMalware.Communication {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Detection", Namespace="http://schemas.datacontract.org/2004/07/WslAntiMalware.Communication")]
    public partial class Detection : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ImageFileNameField;
        
        private WslAntiMalware.Communication.DetectionResolutionType ResolutionField;
        
        private long UIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageFileName {
            get {
                return this.ImageFileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageFileNameField, value) != true)) {
                    this.ImageFileNameField = value;
                    this.RaisePropertyChanged("ImageFileName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WslAntiMalware.Communication.DetectionResolutionType Resolution {
            get {
                return this.ResolutionField;
            }
            set {
                if ((this.ResolutionField.Equals(value) != true)) {
                    this.ResolutionField = value;
                    this.RaisePropertyChanged("Resolution");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long UID {
            get {
                return this.UIDField;
            }
            set {
                if ((this.UIDField.Equals(value) != true)) {
                    this.UIDField = value;
                    this.RaisePropertyChanged("UID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DetectionResolutionType", Namespace="http://schemas.datacontract.org/2004/07/WslAntiMalware.Communication")]
    public enum DetectionResolutionType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Excepted = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Killed = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogMessage", Namespace="http://schemas.datacontract.org/2004/07/WslAntiMalware.Communication")]
    public partial class LogMessage : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string LogField;
        
        private WslAntiMalware.Communication.Severity SeverityField;
        
        private long UIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Log {
            get {
                return this.LogField;
            }
            set {
                if ((object.ReferenceEquals(this.LogField, value) != true)) {
                    this.LogField = value;
                    this.RaisePropertyChanged("Log");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WslAntiMalware.Communication.Severity Severity {
            get {
                return this.SeverityField;
            }
            set {
                if ((this.SeverityField.Equals(value) != true)) {
                    this.SeverityField = value;
                    this.RaisePropertyChanged("Severity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long UID {
            get {
                return this.UIDField;
            }
            set {
                if ((this.UIDField.Equals(value) != true)) {
                    this.UIDField = value;
                    this.RaisePropertyChanged("UID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Severity", Namespace="http://schemas.datacontract.org/2004/07/WslAntiMalware.Communication")]
    public enum Severity : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Information = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Warning = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 2,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://Microsoft.ServiceModel.Samples", ConfigurationName="Communication.IWslAntiMalwareSystemServiceEndpoint", CallbackContract=typeof(WslAntiMalware.Communication.IWslAntiMalwareSystemServiceEndpointCallback))]
    public interface IWslAntiMalwareSystemServiceEndpoint {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IWslAntiMalwareSystemServiceEndpoint/Regist" +
            "erClient", ReplyAction="http://Microsoft.ServiceModel.Samples/IWslAntiMalwareSystemServiceEndpoint/Regist" +
            "erClientResponse")]
        System.Threading.Tasks.Task RegisterClientAsync(string Token);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IWslAntiMalwareSystemServiceEndpoint/StartM" +
            "onitoring", ReplyAction="http://Microsoft.ServiceModel.Samples/IWslAntiMalwareSystemServiceEndpoint/StartM" +
            "onitoringResponse")]
        System.Threading.Tasks.Task<bool> StartMonitoringAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IWslAntiMalwareSystemServiceEndpoint/StopMo" +
            "nitoring", ReplyAction="http://Microsoft.ServiceModel.Samples/IWslAntiMalwareSystemServiceEndpoint/StopMo" +
            "nitoringResponse")]
        System.Threading.Tasks.Task<bool> StopMonitoringAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://Microsoft.ServiceModel.Samples/IWslAntiMalwareSystemServiceEndpoint/Detect" +
            "ions", ReplyAction="http://Microsoft.ServiceModel.Samples/IWslAntiMalwareSystemServiceEndpoint/Detect" +
            "ionsResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<WslAntiMalware.Communication.Detection>> DetectionsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWslAntiMalwareSystemServiceEndpointCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/IWslAntiMalwareSystemServiceEndpoint/OnMess" +
            "age")]
        void OnMessage(WslAntiMalware.Communication.LogMessage Message);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://Microsoft.ServiceModel.Samples/IWslAntiMalwareSystemServiceEndpoint/OnDete" +
            "ction")]
        void OnDetection(string ImageFileName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IWslAntiMalwareSystemServiceEndpointChannel : WslAntiMalware.Communication.IWslAntiMalwareSystemServiceEndpoint, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class WslAntiMalwareSystemServiceEndpointClientBase : System.ServiceModel.DuplexClientBase<WslAntiMalware.Communication.IWslAntiMalwareSystemServiceEndpoint>, WslAntiMalware.Communication.IWslAntiMalwareSystemServiceEndpoint {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public WslAntiMalwareSystemServiceEndpointClientBase(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance, WslAntiMalwareSystemServiceEndpointClientBase.GetDefaultBinding(), WslAntiMalwareSystemServiceEndpointClientBase.GetDefaultEndpointAddress()) {
            this.Endpoint.Name = EndpointConfiguration.NetTcpBinding_IWslAntiMalwareSystemServiceEndpoint.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WslAntiMalwareSystemServiceEndpointClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration) : 
                base(callbackInstance, WslAntiMalwareSystemServiceEndpointClientBase.GetBindingForEndpoint(endpointConfiguration), WslAntiMalwareSystemServiceEndpointClientBase.GetEndpointAddress(endpointConfiguration)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WslAntiMalwareSystemServiceEndpointClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(callbackInstance, WslAntiMalwareSystemServiceEndpointClientBase.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress)) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WslAntiMalwareSystemServiceEndpointClientBase(System.ServiceModel.InstanceContext callbackInstance, EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, WslAntiMalwareSystemServiceEndpointClientBase.GetBindingForEndpoint(endpointConfiguration), remoteAddress) {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public WslAntiMalwareSystemServiceEndpointClientBase(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public System.Threading.Tasks.Task RegisterClientAsync(string Token) {
            return base.Channel.RegisterClientAsync(Token);
        }
        
        public System.Threading.Tasks.Task<bool> StartMonitoringAsync() {
            return base.Channel.StartMonitoringAsync();
        }
        
        public System.Threading.Tasks.Task<bool> StopMonitoringAsync() {
            return base.Channel.StopMonitoringAsync();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<WslAntiMalware.Communication.Detection>> DetectionsAsync() {
            return base.Channel.DetectionsAsync();
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync() {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IWslAntiMalwareSystemServiceEndpoint)) {
                System.ServiceModel.NetTcpBinding result = new System.ServiceModel.NetTcpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.Security.Mode = System.ServiceModel.SecurityMode.None;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration) {
            if ((endpointConfiguration == EndpointConfiguration.NetTcpBinding_IWslAntiMalwareSystemServiceEndpoint)) {
                return new System.ServiceModel.EndpointAddress("net.tcp://localhost:8000/WslAntiMalwareSystemServiceEndpoint");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding() {
            return WslAntiMalwareSystemServiceEndpointClientBase.GetBindingForEndpoint(EndpointConfiguration.NetTcpBinding_IWslAntiMalwareSystemServiceEndpoint);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress() {
            return WslAntiMalwareSystemServiceEndpointClientBase.GetEndpointAddress(EndpointConfiguration.NetTcpBinding_IWslAntiMalwareSystemServiceEndpoint);
        }
        
        public enum EndpointConfiguration {
            
            NetTcpBinding_IWslAntiMalwareSystemServiceEndpoint,
        }
    }
    
    public class OnMessageReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OnMessageReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public WslAntiMalware.Communication.LogMessage Message {
            get {
                base.RaiseExceptionIfNecessary();
                return ((WslAntiMalware.Communication.LogMessage)(this.results[0]));
            }
        }
    }
    
    public class OnDetectionReceivedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public OnDetectionReceivedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ImageFileName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    public partial class WslAntiMalwareSystemServiceEndpointClient : WslAntiMalwareSystemServiceEndpointClientBase {
        
        public WslAntiMalwareSystemServiceEndpointClient(EndpointConfiguration endpointConfiguration) : 
                this(new WslAntiMalwareSystemServiceEndpointClientCallback(), endpointConfiguration) {
        }
        
        private WslAntiMalwareSystemServiceEndpointClient(WslAntiMalwareSystemServiceEndpointClientCallback callbackImpl, EndpointConfiguration endpointConfiguration) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), endpointConfiguration) {
            callbackImpl.Initialize(this);
        }
        
        public WslAntiMalwareSystemServiceEndpointClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                this(new WslAntiMalwareSystemServiceEndpointClientCallback(), binding, remoteAddress) {
        }
        
        private WslAntiMalwareSystemServiceEndpointClient(WslAntiMalwareSystemServiceEndpointClientCallback callbackImpl, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl), binding, remoteAddress) {
            callbackImpl.Initialize(this);
        }
        
        public WslAntiMalwareSystemServiceEndpointClient() : 
                this(new WslAntiMalwareSystemServiceEndpointClientCallback()) {
        }
        
        private WslAntiMalwareSystemServiceEndpointClient(WslAntiMalwareSystemServiceEndpointClientCallback callbackImpl) : 
                base(new System.ServiceModel.InstanceContext(callbackImpl)) {
            callbackImpl.Initialize(this);
        }
        
        public event System.EventHandler<OnMessageReceivedEventArgs> OnMessageReceived;
        
        public event System.EventHandler<OnDetectionReceivedEventArgs> OnDetectionReceived;
        
        private void OnOnMessageReceived(object state) {
            if ((this.OnMessageReceived != null)) {
                object[] results = ((object[])(state));
                this.OnMessageReceived(this, new OnMessageReceivedEventArgs(results, null, false, null));
            }
        }
        
        private void OnOnDetectionReceived(object state) {
            if ((this.OnDetectionReceived != null)) {
                object[] results = ((object[])(state));
                this.OnDetectionReceived(this, new OnDetectionReceivedEventArgs(results, null, false, null));
            }
        }
        
        private class WslAntiMalwareSystemServiceEndpointClientCallback : object, IWslAntiMalwareSystemServiceEndpointCallback {
            
            private WslAntiMalwareSystemServiceEndpointClient proxy;
            
            public void Initialize(WslAntiMalwareSystemServiceEndpointClient proxy) {
                this.proxy = proxy;
            }
            
            public void OnMessage(WslAntiMalware.Communication.LogMessage Message) {
                this.proxy.OnOnMessageReceived(new object[] {
                            Message});
            }
            
            public void OnDetection(string ImageFileName) {
                this.proxy.OnOnDetectionReceived(new object[] {
                            ImageFileName});
            }
        }
    }
}
